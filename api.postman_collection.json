{
	"info": {
		"_postman_id": "b347cb27-75ce-4367-a3f9-5b794d52aee8",
		"name": "pruebas castor api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28772816"
	},
	"item": [
		{
			"name": "Get active tasks",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "de318060d186295a726800c42ffea50c46d79dfa",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "createdAt",
							"value": "2024-07-16T17:35:44.719Z",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "body",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://todoist.com/oauth/authorize",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "fadb258fb1964410b4d01dc3f6c024ce",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "data:read",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://todoist.com/oauth/access_token",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Todoist API",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "https://api.todoist.com/rest/v2/tasks",
					"protocol": "https",
					"host": [
						"api",
						"todoist",
						"com"
					],
					"path": [
						"rest",
						"v2",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an active task unique",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains the message 'Task not found'\", function () {\r",
							"  pm.expect(pm.response.text()).to.include(\"Task not found\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenacces}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "https://api.todoist.com/rest/v2/tasks/{{id}}",
					"protocol": "https",
					"host": [
						"api",
						"todoist",
						"com"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.project_id).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.content).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.due).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.is_completed).to.exist.and.to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Due date is in a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.due.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Priority is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.priority).to.be.a('number');\r",
							"  pm.expect(responseData.priority).to.be.at.least(0, \"Priority should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Save data new task\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var id = jsonData.id;\r",
							"    pm.environment.set(\"id\", id);\r",
							"\r",
							"    pm.expect(id).to.not.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenacces}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"content\": \"{{$randomCity}}\", \"due_string\": \"tomorrow at 12:00\", \"due_lang\": \"es\", \"priority\": 4}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.todoist.com/rest/v2/tasks/",
					"protocol": "https",
					"host": [
						"api",
						"todoist",
						"com"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.content).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.is_completed).to.exist.and.to.be.a('boolean');\r",
							"    pm.expect(responseData.due).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.priority).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.created_at).to.exist.and.to.be.a('string');\r",
							"});\r",
							"var template = `\r",
							"<canvas id=\"lineChart\" height=\"75\"></canvas>\r",
							"\r",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
							"\r",
							"<script>\r",
							"    var ctx = document.getElementById(\"lineChart\");\r",
							"\r",
							"    var lineChart = new Chart(ctx, {\r",
							"        type: \"line\",\r",
							"        data: {\r",
							"            labels: [\"Task not found\"],\r",
							"            datasets: [{\r",
							"                data: [404],\r",
							"                \r",
							"                // Change these colours to customize the chart\r",
							"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],\r",
							"            }]\r",
							"        },\r",
							"        options: {\r",
							"            legend: { display: false },\r",
							"            title: {\r",
							"                display: true,\r",
							"                text: 'Response Status'\r",
							"            },\r",
							"            scales: {\r",
							"                xAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Message'\r",
							"                    }\r",
							"                }],\r",
							"                yAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Status Code'\r",
							"                    }\r",
							"                }]\r",
							"            }\r",
							"        }\r",
							"\r",
							"    });\r",
							"\r",
							"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
							"    // code of the Visualizer template\r",
							"    pm.getData(function (err, value) {\r",
							"        lineChart.data.datasets[0].data = value.response.data;\r",
							"        lineChart.data.labels = value.response.labels;\r",
							"        lineChart.update();\r",
							"    });\r",
							"\r",
							"</script>`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    var visualizerData = {\r",
							"        labels: [\"Task not found\"],\r",
							"        data: [404]\r",
							"    };\r",
							"\r",
							"    return {response: visualizerData};\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenacces}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Request-Id",
						"value": "$(uuidgen)"
					},
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"content\": \"{{$randomBoolean}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.todoist.com/rest/v2/tasks/{{id}}",
					"protocol": "https",
					"host": [
						"api",
						"todoist",
						"com"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, content, project_id, due, and priority\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.content).to.exist;\r",
							"    pm.expect(responseData.project_id).to.exist;\r",
							"    pm.expect(responseData.due).to.exist;\r",
							"    pm.expect(responseData.priority).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the 'due' field is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.due).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[+-]\\d{2}:\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response schema matches the expected schema for a task\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.project_id).to.exist;\r",
							"    pm.expect(responseData.content).to.exist;\r",
							"    pm.expect(responseData.completed).to.exist;\r",
							"    pm.expect(responseData.label_ids).to.exist;\r",
							"    pm.expect(responseData.priority).to.exist;\r",
							"    pm.expect(responseData.due).to.exist;\r",
							"    pm.expect(responseData.url).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenacces}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer $token"
					}
				],
				"url": {
					"raw": "https://api.todoist.com/rest/v2/tasks/{{id}}",
					"protocol": "https",
					"host": [
						"api",
						"todoist",
						"com"
					],
					"path": [
						"rest",
						"v2",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}